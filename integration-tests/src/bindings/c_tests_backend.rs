// This is an experimental feature used to generate Rust bindings from Candid.
// THIS IS A GENERATED FILE. DO NOT EDIT THIS FILE TO AVOID DATA LOSS.
#![allow(dead_code, unused_imports, non_snake_case)]
use candid::{self, CandidType, Decode, Deserialize, Encode, Principal};

pub struct CTestsBackendCanister {
    pub canister_id: Principal,
    pub caller: super::Caller,
}

impl CTestsBackendCanister {
    pub fn greet(&self, arg0: String) -> super::CallBuilder<String> {
        let args = Encode!(&arg0);
        self.caller
            .call(self.canister_id, super::CallMode::Query, "greet", args)
    }
    pub fn test_access(&self) -> super::CallBuilder<()> {
        let args = Encode!();
        self.caller.call(
            self.canister_id,
            super::CallMode::Query,
            "test_access",
            args,
        )
    }
}
pub const CANISTER_ID: Principal =
    Principal::from_slice(&[255, 255, 255, 255, 255, 224, 0, 2, 1, 1]); // lz3um-vp777-77777-aaaba-cai

pub fn new(caller: &super::Caller, canister_id: Principal) -> CTestsBackendCanister {
    CTestsBackendCanister {
        canister_id,
        caller: caller.clone(),
    }
}

pub fn deploy(deployer: &super::Deployer) -> super::DeployBuilder<CTestsBackendCanister> {
    let args = Encode!();
    let result = deployer.deploy(args, new);
    let result = if let Some(id) = canister_id() {
        result.with_canister_id(id)
    } else {
        result
    };
    if let Some(wasm) = wasm() {
        result.with_wasm(wasm)
    } else {
        result
    }
}
pub fn canister_id() -> Option<Principal> {
    Some(Principal::from_text("lz3um-vp777-77777-aaaba-cai").unwrap())
}

pub fn wasm() -> Option<Vec<u8>> {
    let mut path = std::path::PathBuf::new();
    path.push("../target/wasm32-wasip1/release/c_tests_main_nowasi.wasm");
    let wasm =
        std::fs::read(path.as_path()).unwrap_or_else(|_| panic!("wasm binary not found: {path:?}"));
    Some(wasm)
}
